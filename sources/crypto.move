#[allow(implicit_const_copy)]
module aliceandbobpoker::crypto {
    use sui::groth16;
    use sui::bcs::{BCS, peel_u128};
    use sui::bcs;
    use std::vector;
    use sui::poseidon::poseidon_bn254;

    use aliceandbobpoker::math::{submod};

    const PUBLIC_KEY_VK: vector<u8> = vector<u8>[25, 12, 163, 180, 250, 222, 29, 90, 35, 114, 97, 146, 119, 237, 218, 29, 23, 198, 118, 13, 46, 214, 18, 90, 155, 127, 190, 190, 20, 235, 58, 134, 84, 140, 69, 193, 207, 100, 169, 221, 244, 52, 63, 1, 208, 172, 100, 95, 42, 154, 39, 164, 56, 109, 206, 170, 77, 249, 51, 166, 200, 133, 139, 36, 67, 53, 165, 192, 137, 246, 85, 71, 204, 215, 40, 94, 154, 87, 64, 163, 189, 24, 179, 60, 29, 81, 172, 168, 97, 232, 252, 199, 252, 99, 78, 151, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 12, 85, 78, 3, 25, 55, 69, 118, 161, 62, 104, 132, 34, 197, 213, 68, 103, 164, 0, 197, 199, 176, 233, 198, 10, 24, 83, 223, 106, 40, 131, 2, 125, 68, 173, 122, 118, 82, 145, 59, 61, 25, 167, 130, 34, 183, 238, 176, 3, 112, 52, 244, 46, 148, 148, 30, 86, 225, 82, 62, 149, 17, 157, 39, 3, 0, 0, 0, 0, 0, 0, 0, 228, 38, 238, 94, 79, 246, 123, 254, 128, 170, 240, 199, 7, 139, 196, 54, 97, 255, 141, 223, 65, 16, 96, 238, 80, 199, 92, 173, 245, 230, 164, 13, 48, 29, 188, 16, 206, 207, 119, 129, 106, 168, 225, 177, 21, 188, 164, 107, 161, 74, 136, 230, 209, 142, 31, 125, 249, 115, 114, 34, 224, 17, 242, 25, 20, 123, 28, 14, 252, 130, 164, 160, 42, 125, 235, 54, 83, 43, 171, 10, 19, 86, 235, 233, 58, 86, 105, 202, 139, 84, 148, 48, 243, 42, 46, 17];
    const ENCRYPT_VK: vector<u8> = vector<u8>[25, 12, 163, 180, 250, 222, 29, 90, 35, 114, 97, 146, 119, 237, 218, 29, 23, 198, 118, 13, 46, 214, 18, 90, 155, 127, 190, 190, 20, 235, 58, 134, 84, 140, 69, 193, 207, 100, 169, 221, 244, 52, 63, 1, 208, 172, 100, 95, 42, 154, 39, 164, 56, 109, 206, 170, 77, 249, 51, 166, 200, 133, 139, 36, 67, 53, 165, 192, 137, 246, 85, 71, 204, 215, 40, 94, 154, 87, 64, 163, 189, 24, 179, 60, 29, 81, 172, 168, 97, 232, 252, 199, 252, 99, 78, 151, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 187, 121, 131, 22, 214, 84, 100, 64, 45, 87, 245, 108, 21, 108, 242, 70, 114, 169, 133, 45, 170, 211, 221, 222, 253, 35, 14, 95, 225, 212, 27, 39, 219, 100, 153, 254, 205, 17, 210, 166, 65, 198, 228, 27, 230, 48, 19, 212, 239, 80, 47, 102, 159, 192, 153, 95, 163, 226, 35, 113, 64, 255, 196, 134, 7, 0, 0, 0, 0, 0, 0, 0, 109, 164, 47, 247, 137, 29, 75, 145, 208, 3, 211, 21, 155, 215, 147, 174, 120, 57, 18, 155, 74, 72, 100, 170, 96, 211, 149, 203, 98, 167, 28, 19, 182, 103, 18, 88, 154, 220, 111, 197, 12, 17, 244, 183, 125, 98, 246, 248, 234, 78, 200, 114, 118, 166, 110, 37, 114, 41, 31, 157, 115, 215, 10, 151, 104, 234, 8, 150, 188, 8, 244, 129, 159, 117, 186, 68, 3, 198, 132, 70, 221, 169, 232, 93, 63, 106, 116, 135, 57, 217, 6, 198, 47, 192, 230, 136, 111, 129, 228, 242, 147, 100, 56, 71, 60, 148, 69, 204, 23, 216, 144, 119, 251, 191, 232, 110, 229, 148, 93, 32, 93, 49, 76, 237, 197, 201, 19, 136, 240, 251, 200, 34, 67, 78, 23, 155, 190, 199, 176, 21, 150, 182, 148, 76, 139, 93, 19, 169, 126, 233, 61, 24, 57, 237, 77, 215, 159, 174, 92, 140, 143, 186, 57, 139, 45, 225, 39, 221, 151, 227, 234, 64, 210, 242, 38, 97, 254, 123, 208, 224, 199, 255, 143, 68, 36, 222, 181, 178, 13, 121, 76, 146, 141, 109, 4, 28, 196, 181, 90, 169, 165, 75, 67, 71, 67, 103, 243, 234, 67, 27, 175, 5, 119, 161, 150, 31, 196, 79, 167, 55, 68, 26, 11, 20];
    const ENCRYPT_PUBLIC_VK: vector<u8> = vector<u8>[25, 12, 163, 180, 250, 222, 29, 90, 35, 114, 97, 146, 119, 237, 218, 29, 23, 198, 118, 13, 46, 214, 18, 90, 155, 127, 190, 190, 20, 235, 58, 134, 84, 140, 69, 193, 207, 100, 169, 221, 244, 52, 63, 1, 208, 172, 100, 95, 42, 154, 39, 164, 56, 109, 206, 170, 77, 249, 51, 166, 200, 133, 139, 36, 67, 53, 165, 192, 137, 246, 85, 71, 204, 215, 40, 94, 154, 87, 64, 163, 189, 24, 179, 60, 29, 81, 172, 168, 97, 232, 252, 199, 252, 99, 78, 151, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 177, 201, 3, 207, 85, 172, 139, 165, 234, 130, 222, 231, 42, 135, 229, 241, 154, 212, 94, 114, 21, 11, 54, 159, 88, 34, 202, 140, 190, 31, 32, 31, 115, 53, 83, 76, 4, 31, 141, 163, 205, 146, 190, 99, 16, 96, 141, 224, 230, 246, 50, 46, 224, 2, 255, 176, 67, 107, 22, 106, 246, 79, 201, 9, 8, 0, 0, 0, 0, 0, 0, 0, 220, 185, 254, 132, 180, 81, 69, 170, 88, 253, 126, 39, 146, 26, 214, 118, 40, 157, 36, 162, 192, 232, 61, 88, 160, 139, 182, 175, 126, 87, 46, 169, 101, 146, 33, 244, 120, 247, 141, 244, 246, 181, 248, 176, 133, 153, 124, 219, 94, 35, 26, 216, 112, 122, 252, 11, 205, 127, 102, 133, 160, 165, 1, 6, 161, 65, 158, 113, 166, 64, 17, 202, 157, 86, 234, 131, 167, 162, 120, 226, 22, 222, 249, 95, 230, 155, 110, 19, 59, 29, 228, 178, 198, 15, 39, 160, 139, 106, 231, 203, 131, 2, 164, 244, 69, 2, 63, 126, 215, 168, 168, 75, 115, 136, 28, 89, 101, 60, 91, 96, 63, 177, 74, 250, 164, 164, 137, 22, 248, 45, 216, 163, 173, 15, 229, 200, 106, 28, 30, 193, 32, 133, 54, 188, 101, 223, 42, 70, 102, 191, 173, 24, 186, 60, 124, 82, 52, 94, 228, 164, 186, 92, 14, 148, 138, 62, 248, 159, 149, 186, 213, 140, 219, 143, 63, 23, 50, 181, 116, 162, 182, 190, 225, 18, 102, 166, 208, 107, 164, 103, 0, 44, 17, 70, 196, 3, 179, 229, 230, 138, 48, 141, 50, 53, 232, 77, 146, 38, 152, 98, 160, 240, 196, 165, 115, 227, 155, 149, 96, 155, 86, 56, 201, 137, 8, 78, 91, 87, 10, 158, 129, 236, 75, 44, 120, 35, 55, 95, 102, 1, 100, 179, 27, 127, 56, 39, 93, 60, 242, 214, 8, 197, 140, 94, 154, 11];
    const BLIND_VK: vector<u8> = vector<u8>[251, 188, 218, 46, 217, 30, 70, 130, 109, 167, 5, 189, 170, 101, 111, 156, 207, 23, 42, 175, 9, 225, 225, 213, 119, 7, 36, 45, 103, 231, 205, 150, 128, 131, 249, 207, 135, 53, 144, 86, 177, 246, 190, 228, 234, 22, 36, 116, 235, 120, 98, 161, 49, 222, 222, 228, 99, 68, 78, 184, 48, 40, 163, 47, 235, 210, 106, 193, 111, 151, 178, 199, 221, 101, 107, 143, 110, 16, 55, 59, 87, 103, 172, 106, 131, 63, 151, 142, 103, 153, 204, 8, 235, 16, 84, 19, 231, 78, 186, 40, 239, 13, 114, 169, 0, 6, 250, 134, 16, 186, 48, 122, 17, 166, 181, 207, 245, 66, 30, 183, 5, 3, 236, 233, 55, 187, 242, 44, 169, 212, 54, 182, 123, 106, 137, 242, 172, 252, 47, 79, 45, 146, 105, 30, 2, 98, 107, 218, 38, 57, 170, 158, 111, 75, 252, 106, 100, 193, 190, 43, 126, 154, 155, 241, 97, 29, 255, 181, 148, 204, 246, 168, 52, 63, 224, 67, 192, 148, 33, 191, 194, 39, 86, 162, 156, 34, 71, 192, 169, 95, 19, 1, 162, 42, 44, 225, 117, 238, 208, 67, 186, 141, 106, 172, 95, 35, 54, 170, 254, 0, 236, 1, 201, 107, 187, 208, 181, 207, 81, 120, 217, 30, 57, 35, 9, 0, 0, 0, 0, 0, 0, 0, 164, 101, 89, 255, 225, 156, 52, 112, 229, 100, 68, 106, 196, 70, 38, 0, 101, 145, 69, 24, 115, 216, 11, 60, 36, 239, 209, 52, 25, 54, 246, 3, 191, 125, 143, 233, 121, 84, 230, 204, 84, 188, 242, 6, 39, 119, 237, 120, 130, 223, 195, 34, 14, 72, 18, 117, 227, 247, 131, 156, 87, 55, 64, 141, 100, 165, 152, 36, 227, 81, 118, 126, 139, 245, 5, 67, 84, 133, 44, 201, 107, 132, 231, 197, 238, 187, 56, 25, 115, 146, 189, 170, 33, 87, 82, 129, 135, 57, 198, 22, 174, 230, 37, 183, 2, 248, 154, 59, 114, 67, 202, 205, 33, 20, 239, 118, 84, 67, 200, 91, 56, 167, 111, 81, 2, 251, 230, 134, 242, 133, 27, 9, 112, 231, 235, 218, 233, 92, 120, 247, 55, 21, 158, 144, 139, 190, 149, 108, 191, 49, 120, 90, 25, 192, 172, 14, 33, 143, 203, 148, 25, 190, 193, 34, 117, 233, 128, 237, 104, 92, 3, 130, 214, 117, 73, 36, 203, 33, 183, 65, 194, 39, 46, 233, 185, 183, 233, 18, 109, 26, 229, 169, 225, 53, 253, 135, 125, 181, 254, 61, 246, 184, 155, 69, 111, 87, 127, 116, 101, 211, 125, 214, 215, 20, 22, 100, 51, 145, 51, 1, 152, 203, 57, 169, 72, 140, 202, 182, 103, 1, 122, 165, 103, 2, 109, 204, 85, 50, 213, 168, 215, 122, 88, 157, 194, 32, 38, 27, 195, 239, 207, 63, 27, 203, 83, 36, 55, 211, 38, 55, 68, 40, 93, 230, 168, 66, 155, 195, 165, 153, 67, 75, 71, 93, 136, 78, 195, 219, 39, 120, 162, 15, 3, 15, 158, 123, 247, 29];
    const DECRYPT_VK: vector<u8> = vector<u8>[25, 12, 163, 180, 250, 222, 29, 90, 35, 114, 97, 146, 119, 237, 218, 29, 23, 198, 118, 13, 46, 214, 18, 90, 155, 127, 190, 190, 20, 235, 58, 134, 84, 140, 69, 193, 207, 100, 169, 221, 244, 52, 63, 1, 208, 172, 100, 95, 42, 154, 39, 164, 56, 109, 206, 170, 77, 249, 51, 166, 200, 133, 139, 36, 67, 53, 165, 192, 137, 246, 85, 71, 204, 215, 40, 94, 154, 87, 64, 163, 189, 24, 179, 60, 29, 81, 172, 168, 97, 232, 252, 199, 252, 99, 78, 151, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 60, 212, 249, 70, 28, 242, 177, 132, 144, 216, 202, 225, 152, 204, 93, 222, 200, 173, 203, 227, 60, 77, 54, 78, 105, 36, 37, 202, 180, 44, 81, 8, 206, 108, 143, 131, 34, 146, 36, 117, 57, 32, 64, 211, 68, 165, 196, 24, 140, 130, 218, 242, 154, 132, 133, 204, 126, 250, 177, 245, 124, 166, 28, 40, 7, 0, 0, 0, 0, 0, 0, 0, 167, 149, 47, 185, 58, 98, 49, 9, 109, 221, 212, 165, 82, 135, 92, 106, 55, 196, 212, 136, 244, 149, 38, 77, 161, 203, 204, 172, 99, 145, 71, 0, 58, 224, 223, 121, 255, 112, 174, 246, 154, 221, 34, 253, 223, 235, 29, 16, 153, 195, 199, 61, 131, 201, 33, 49, 71, 53, 58, 134, 108, 251, 25, 141, 132, 58, 243, 237, 172, 188, 220, 245, 12, 133, 96, 70, 113, 120, 173, 123, 175, 250, 155, 11, 152, 164, 130, 202, 109, 25, 49, 110, 159, 131, 164, 38, 153, 68, 128, 39, 208, 17, 77, 33, 23, 161, 41, 214, 232, 208, 99, 164, 206, 249, 224, 53, 139, 78, 50, 30, 230, 182, 144, 36, 72, 165, 181, 173, 251, 156, 233, 160, 38, 243, 85, 226, 31, 5, 5, 230, 180, 16, 125, 87, 124, 168, 238, 230, 4, 89, 243, 93, 60, 245, 203, 161, 63, 68, 14, 43, 102, 231, 135, 141, 95, 31, 252, 28, 154, 81, 2, 105, 220, 211, 247, 189, 153, 85, 142, 145, 28, 194, 95, 97, 94, 131, 43, 45, 70, 95, 40, 129, 176, 182, 127, 89, 192, 24, 56, 44, 124, 101, 52, 34, 133, 215, 41, 13, 16, 100, 198, 214, 142, 112, 226, 24, 237, 62, 122, 109, 212, 241, 225, 4];
    const DISJUNCT_VK: vector<u8> = vector<u8>[251, 188, 218, 46, 217, 30, 70, 130, 109, 167, 5, 189, 170, 101, 111, 156, 207, 23, 42, 175, 9, 225, 225, 213, 119, 7, 36, 45, 103, 231, 205, 150, 128, 131, 249, 207, 135, 53, 144, 86, 177, 246, 190, 228, 234, 22, 36, 116, 235, 120, 98, 161, 49, 222, 222, 228, 99, 68, 78, 184, 48, 40, 163, 47, 235, 210, 106, 193, 111, 151, 178, 199, 221, 101, 107, 143, 110, 16, 55, 59, 87, 103, 172, 106, 131, 63, 151, 142, 103, 153, 204, 8, 235, 16, 84, 19, 231, 78, 186, 40, 239, 13, 114, 169, 0, 6, 250, 134, 16, 186, 48, 122, 17, 166, 181, 207, 245, 66, 30, 183, 5, 3, 236, 233, 55, 187, 242, 44, 169, 212, 54, 182, 123, 106, 137, 242, 172, 252, 47, 79, 45, 146, 105, 30, 2, 98, 107, 218, 38, 57, 170, 158, 111, 75, 252, 106, 100, 193, 190, 43, 126, 154, 155, 241, 97, 29, 255, 181, 148, 204, 246, 168, 52, 63, 224, 67, 192, 148, 33, 191, 194, 39, 86, 162, 156, 34, 71, 192, 169, 95, 19, 1, 162, 42, 44, 225, 117, 238, 208, 67, 186, 141, 106, 172, 95, 35, 54, 170, 254, 0, 236, 1, 201, 107, 187, 208, 181, 207, 81, 120, 217, 30, 57, 35, 9, 0, 0, 0, 0, 0, 0, 0, 125, 245, 166, 244, 207, 72, 11, 112, 22, 169, 253, 176, 152, 133, 31, 17, 165, 212, 29, 164, 196, 217, 215, 195, 5, 100, 30, 248, 2, 109, 90, 157, 117, 162, 221, 82, 165, 94, 18, 132, 42, 29, 215, 150, 233, 112, 9, 65, 113, 73, 153, 45, 228, 126, 145, 135, 195, 169, 201, 98, 70, 203, 156, 24, 194, 0, 149, 55, 71, 120, 235, 54, 201, 91, 49, 26, 25, 199, 139, 85, 135, 191, 155, 7, 240, 176, 7, 175, 67, 197, 45, 224, 31, 237, 32, 148, 57, 209, 112, 61, 90, 38, 69, 137, 206, 245, 67, 39, 138, 223, 8, 168, 112, 147, 172, 98, 157, 179, 180, 73, 120, 127, 167, 48, 65, 2, 131, 152, 15, 199, 50, 153, 177, 51, 118, 165, 41, 209, 59, 154, 82, 179, 215, 82, 83, 238, 227, 217, 159, 26, 212, 16, 26, 242, 75, 84, 203, 17, 125, 129, 108, 236, 250, 191, 77, 89, 1, 102, 83, 53, 92, 83, 121, 33, 22, 27, 232, 154, 93, 170, 7, 77, 63, 89, 240, 106, 22, 11, 138, 128, 182, 21, 178, 160, 235, 186, 108, 36, 1, 7, 193, 229, 199, 89, 246, 210, 9, 158, 221, 60, 211, 17, 87, 220, 23, 185, 6, 111, 28, 108, 228, 92, 220, 167, 234, 150, 156, 101, 195, 102, 38, 218, 144, 174, 220, 238, 115, 174, 242, 220, 247, 44, 28, 101, 249, 65, 169, 16, 141, 59, 125, 230, 19, 109, 121, 157, 165, 201, 18, 90, 35, 29, 37, 193, 61, 99, 232, 149, 214, 230, 5, 163, 99, 24, 84, 238, 2, 252, 155, 51, 35, 159, 54, 108, 29, 47, 208, 1];
    const REVEAL_VK: vector<u8> = vector<u8>[251, 188, 218, 46, 217, 30, 70, 130, 109, 167, 5, 189, 170, 101, 111, 156, 207, 23, 42, 175, 9, 225, 225, 213, 119, 7, 36, 45, 103, 231, 205, 150, 128, 131, 249, 207, 135, 53, 144, 86, 177, 246, 190, 228, 234, 22, 36, 116, 235, 120, 98, 161, 49, 222, 222, 228, 99, 68, 78, 184, 48, 40, 163, 47, 235, 210, 106, 193, 111, 151, 178, 199, 221, 101, 107, 143, 110, 16, 55, 59, 87, 103, 172, 106, 131, 63, 151, 142, 103, 153, 204, 8, 235, 16, 84, 19, 231, 78, 186, 40, 239, 13, 114, 169, 0, 6, 250, 134, 16, 186, 48, 122, 17, 166, 181, 207, 245, 66, 30, 183, 5, 3, 236, 233, 55, 187, 242, 44, 169, 212, 54, 182, 123, 106, 137, 242, 172, 252, 47, 79, 45, 146, 105, 30, 2, 98, 107, 218, 38, 57, 170, 158, 111, 75, 252, 106, 100, 193, 190, 43, 126, 154, 155, 241, 97, 29, 255, 181, 148, 204, 246, 168, 52, 63, 224, 67, 192, 148, 33, 191, 194, 39, 86, 162, 156, 34, 71, 192, 169, 95, 19, 1, 162, 42, 44, 225, 117, 238, 208, 67, 186, 141, 106, 172, 95, 35, 54, 170, 254, 0, 236, 1, 201, 107, 187, 208, 181, 207, 81, 120, 217, 30, 57, 35, 8, 0, 0, 0, 0, 0, 0, 0, 156, 231, 111, 180, 101, 132, 15, 45, 178, 81, 27, 159, 218, 39, 193, 114, 209, 248, 150, 144, 247, 237, 20, 45, 49, 159, 37, 111, 84, 207, 146, 20, 193, 145, 122, 100, 252, 49, 90, 208, 96, 171, 119, 150, 154, 146, 207, 157, 39, 53, 142, 21, 110, 241, 250, 60, 219, 125, 70, 197, 5, 128, 104, 22, 102, 26, 22, 244, 168, 226, 220, 164, 157, 65, 180, 6, 236, 61, 72, 39, 122, 210, 120, 80, 28, 128, 227, 184, 81, 137, 137, 71, 218, 230, 78, 31, 98, 5, 227, 67, 33, 160, 152, 52, 173, 249, 75, 121, 7, 198, 183, 154, 22, 101, 83, 246, 122, 225, 151, 35, 224, 17, 164, 104, 239, 242, 63, 33, 33, 81, 210, 69, 200, 89, 125, 86, 220, 217, 179, 91, 161, 90, 75, 143, 101, 216, 107, 7, 48, 153, 84, 137, 18, 217, 163, 244, 46, 29, 224, 137, 39, 176, 79, 204, 50, 108, 34, 253, 219, 188, 242, 115, 232, 136, 2, 106, 241, 248, 92, 178, 67, 106, 213, 86, 109, 138, 149, 58, 176, 195, 199, 44, 179, 245, 191, 57, 246, 169, 99, 48, 115, 240, 52, 45, 88, 85, 44, 52, 25, 207, 236, 66, 243, 209, 58, 255, 5, 129, 211, 17, 172, 135, 33, 16, 168, 208, 225, 118, 255, 249, 95, 125, 161, 32, 170, 68, 135, 25, 143, 188, 70, 65, 156, 29, 95, 0, 230, 168, 124, 204, 86, 242, 1, 253, 144, 45];
    const POINT_SUM_EQUAL_VK: vector<u8> = vector<u8>[25, 12, 163, 180, 250, 222, 29, 90, 35, 114, 97, 146, 119, 237, 218, 29, 23, 198, 118, 13, 46, 214, 18, 90, 155, 127, 190, 190, 20, 235, 58, 134, 84, 140, 69, 193, 207, 100, 169, 221, 244, 52, 63, 1, 208, 172, 100, 95, 42, 154, 39, 164, 56, 109, 206, 170, 77, 249, 51, 166, 200, 133, 139, 36, 67, 53, 165, 192, 137, 246, 85, 71, 204, 215, 40, 94, 154, 87, 64, 163, 189, 24, 179, 60, 29, 81, 172, 168, 97, 232, 252, 199, 252, 99, 78, 151, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 127, 110, 41, 164, 146, 99, 102, 188, 156, 89, 254, 153, 236, 142, 212, 23, 193, 248, 224, 159, 143, 177, 4, 133, 72, 139, 236, 192, 4, 31, 133, 38, 255, 131, 234, 3, 7, 174, 223, 131, 165, 116, 98, 83, 204, 63, 54, 246, 43, 32, 16, 5, 252, 240, 98, 234, 52, 8, 245, 146, 181, 91, 73, 137, 9, 0, 0, 0, 0, 0, 0, 0, 152, 73, 16, 20, 1, 149, 28, 247, 131, 51, 111, 12, 134, 183, 79, 20, 152, 190, 9, 210, 54, 130, 226, 86, 134, 206, 13, 23, 131, 90, 201, 151, 75, 15, 20, 126, 168, 106, 85, 45, 116, 16, 138, 238, 45, 136, 166, 49, 34, 241, 228, 209, 185, 255, 67, 251, 177, 81, 214, 234, 233, 253, 200, 143, 122, 102, 154, 54, 114, 191, 224, 163, 218, 169, 7, 131, 255, 169, 196, 14, 99, 190, 85, 204, 16, 72, 217, 101, 21, 88, 55, 119, 152, 255, 212, 141, 170, 177, 63, 21, 4, 44, 243, 246, 201, 129, 184, 36, 199, 36, 61, 135, 242, 104, 234, 72, 83, 255, 23, 90, 0, 151, 159, 95, 170, 202, 197, 174, 69, 207, 232, 27, 249, 32, 173, 13, 21, 122, 55, 91, 54, 96, 204, 87, 27, 18, 65, 35, 240, 95, 196, 192, 65, 136, 9, 8, 235, 232, 159, 148, 83, 78, 176, 95, 66, 5, 48, 10, 27, 177, 73, 211, 4, 139, 253, 143, 157, 219, 226, 220, 133, 232, 96, 21, 206, 1, 104, 199, 202, 92, 52, 17, 238, 103, 44, 1, 163, 245, 0, 147, 68, 158, 157, 201, 250, 90, 198, 119, 150, 31, 21, 166, 97, 36, 233, 161, 83, 179, 235, 149, 49, 31, 140, 7, 243, 148, 50, 3, 78, 28, 219, 146, 214, 28, 82, 190, 60, 100, 121, 202, 77, 202, 29, 186, 127, 153, 42, 138, 233, 143, 142, 202, 243, 41, 17, 35, 95, 166, 36, 96, 24, 252, 167, 90, 54, 209, 219, 68, 213, 251, 77, 130, 47, 210, 153, 35, 26, 213, 65, 158, 132, 223, 217, 83, 104, 42, 217, 154];
    
    const SHUFFLE_VK: vector<u8> = vector<u8>[61, 70, 53, 1, 255, 125, 202, 231, 8, 35, 187, 142, 58, 34, 64, 32, 126, 37, 87, 2, 1, 193, 142, 233, 70, 59, 107, 58, 183, 114, 32, 37, 106, 78, 196, 44, 56, 255, 106, 73, 21, 149, 44, 114, 48, 139, 190, 67, 151, 162, 252, 241, 132, 226, 65, 125, 251, 18, 43, 48, 111, 209, 69, 19, 101, 140, 221, 67, 123, 21, 211, 3, 254, 167, 45, 100, 146, 164, 142, 98, 133, 210, 23, 44, 178, 157, 66, 243, 90, 13, 72, 153, 125, 81, 150, 3, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 202, 211, 203, 194, 149, 155, 58, 183, 58, 123, 223, 38, 209, 72, 207, 157, 69, 142, 166, 172, 178, 62, 18, 208, 230, 224, 81, 221, 91, 250, 86, 0, 143, 58, 134, 73, 192, 209, 20, 82, 85, 166, 116, 115, 196, 70, 161, 103, 9, 74, 143, 108, 110, 222, 255, 19, 109, 241, 230, 108, 103, 167, 1, 133, 4, 0, 0, 0, 0, 0, 0, 0, 202, 171, 236, 109, 250, 39, 114, 161, 233, 249, 155, 98, 70, 150, 174, 2, 70, 9, 35, 76, 206, 192, 219, 0, 222, 206, 14, 237, 123, 117, 147, 163, 171, 240, 86, 205, 106, 151, 207, 54, 71, 239, 196, 131, 0, 114, 152, 59, 1, 230, 37, 230, 169, 14, 250, 102, 161, 190, 227, 31, 189, 249, 200, 11, 163, 236, 104, 73, 241, 230, 221, 56, 13, 247, 169, 171, 144, 49, 148, 221, 83, 11, 116, 165, 130, 185, 86, 14, 204, 56, 176, 163, 87, 171, 208, 32, 215, 214, 137, 207, 56, 41, 79, 193, 143, 186, 146, 65, 125, 187, 109, 137, 167, 231, 47, 160, 54, 218, 192, 198, 201, 189, 144, 57, 245, 37, 179, 4];
    const ZERO_ENCRYPT_VK: vector<u8> = vector<u8>[226, 242, 109, 190, 162, 153, 245, 34, 59, 100, 108, 177, 251, 51, 234, 219, 5, 157, 148, 7, 85, 157, 116, 65, 223, 217, 2, 227, 167, 154, 77, 45, 171, 183, 61, 193, 127, 188, 19, 2, 30, 36, 113, 224, 192, 139, 214, 125, 132, 1, 245, 43, 115, 214, 208, 116, 131, 121, 76, 173, 71, 120, 24, 14, 12, 6, 243, 59, 188, 76, 121, 169, 202, 222, 242, 83, 166, 128, 132, 211, 130, 241, 119, 136, 248, 133, 201, 175, 209, 118, 247, 203, 47, 3, 103, 137, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 111, 7, 144, 246, 2, 25, 94, 43, 166, 11, 226, 17, 232, 152, 237, 126, 206, 48, 73, 23, 176, 15, 237, 72, 98, 98, 247, 140, 136, 168, 228, 3, 20, 106, 31, 25, 162, 224, 148, 100, 113, 87, 190, 83, 181, 236, 240, 255, 217, 183, 127, 204, 126, 97, 116, 36, 76, 86, 255, 2, 21, 25, 247, 155, 4, 0, 0, 0, 0, 0, 0, 0, 74, 193, 255, 133, 17, 82, 58, 94, 177, 29, 149, 98, 173, 204, 45, 39, 6, 134, 225, 55, 152, 54, 193, 186, 247, 61, 66, 192, 234, 55, 150, 28, 207, 120, 178, 108, 57, 105, 220, 173, 157, 180, 195, 143, 87, 32, 17, 174, 24, 218, 25, 118, 58, 187, 41, 153, 142, 96, 144, 144, 149, 134, 172, 4, 135, 50, 0, 84, 156, 67, 225, 70, 239, 126, 48, 126, 236, 231, 49, 43, 41, 27, 151, 151, 80, 61, 158, 189, 223, 252, 42, 205, 126, 135, 228, 135, 110, 13, 5, 203, 32, 226, 83, 53, 194, 252, 75, 174, 214, 84, 154, 59, 183, 87, 150, 243, 60, 10, 45, 65, 50, 231, 76, 27, 196, 148, 121, 158];
    const REVEAL2_VK: vector<u8> = vector<u8>[25, 12, 163, 180, 250, 222, 29, 90, 35, 114, 97, 146, 119, 237, 218, 29, 23, 198, 118, 13, 46, 214, 18, 90, 155, 127, 190, 190, 20, 235, 58, 134, 84, 140, 69, 193, 207, 100, 169, 221, 244, 52, 63, 1, 208, 172, 100, 95, 42, 154, 39, 164, 56, 109, 206, 170, 77, 249, 51, 166, 200, 133, 139, 36, 67, 53, 165, 192, 137, 246, 85, 71, 204, 215, 40, 94, 154, 87, 64, 163, 189, 24, 179, 60, 29, 81, 172, 168, 97, 232, 252, 199, 252, 99, 78, 151, 237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24, 194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25, 118, 4, 68, 214, 28, 112, 138, 66, 33, 130, 178, 157, 112, 69, 201, 163, 173, 189, 18, 223, 183, 40, 221, 86, 71, 122, 190, 39, 198, 211, 23, 26, 94, 135, 105, 173, 180, 190, 119, 231, 38, 108, 249, 85, 210, 255, 76, 106, 5, 16, 102, 158, 243, 21, 10, 214, 28, 165, 176, 197, 12, 37, 95, 137, 9, 0, 0, 0, 0, 0, 0, 0, 59, 228, 125, 117, 137, 60, 40, 7, 74, 167, 204, 90, 105, 76, 209, 123, 229, 4, 230, 231, 112, 236, 109, 160, 6, 75, 126, 221, 239, 215, 32, 35, 90, 244, 193, 113, 217, 127, 6, 40, 241, 76, 106, 241, 199, 81, 21, 163, 89, 53, 172, 27, 238, 109, 132, 146, 133, 67, 238, 235, 66, 138, 244, 171, 248, 125, 100, 62, 38, 243, 238, 200, 255, 108, 127, 212, 254, 221, 160, 247, 2, 211, 26, 152, 50, 137, 55, 23, 200, 175, 84, 9, 129, 178, 3, 168, 117, 234, 100, 114, 58, 247, 106, 64, 113, 237, 100, 54, 209, 213, 5, 227, 101, 175, 131, 169, 138, 3, 214, 32, 98, 193, 212, 98, 103, 184, 160, 34, 251, 148, 210, 60, 193, 108, 70, 253, 142, 95, 225, 172, 104, 142, 167, 187, 179, 149, 247, 76, 204, 141, 245, 196, 99, 108, 81, 198, 255, 37, 159, 30, 244, 96, 241, 124, 80, 139, 41, 78, 183, 251, 19, 92, 231, 172, 223, 90, 219, 54, 134, 129, 16, 56, 108, 69, 51, 55, 188, 60, 174, 169, 14, 137, 249, 39, 203, 85, 230, 62, 165, 117, 172, 207, 158, 149, 106, 239, 161, 229, 59, 239, 170, 4, 115, 212, 65, 118, 140, 93, 236, 228, 174, 111, 36, 173, 61, 203, 210, 175, 85, 238, 18, 152, 123, 57, 228, 146, 20, 194, 58, 119, 100, 11, 41, 184, 226, 179, 173, 203, 114, 159, 235, 144, 124, 151, 89, 175, 185, 207, 168, 191, 137, 23, 193, 180, 2, 81, 76, 45, 0, 188, 20, 52, 40, 87, 21, 217, 185, 51, 100, 69, 205, 213, 249, 49, 114, 151, 86, 21];
    const HALF_BASE_MODULUS: u256 = 10944121435919637611123202872628637544274182200208017171849102093287904247808u256;

    const PLAIN_HASH: u256 = 6075867643650786895666517497906228658321830569963993679641091828622718737309u256;

    const ENCRYPT_PUBLIC_PROOF_LENGTH: u64 = 128;
    const ENCRYPT_PUBLIC_BYTES_LENGTH: u64 = 224;

    const BLIND_PROOF_LENGTH: u64 = 128;
    const BLIND_BYTES_LENGTH: u64 = 256;

    const DECRYPT_PROOF_LENGTH: u64 = 128;
    const DECRYPT_BYTES_LENGTH: u64 = 128;

    struct Point has drop, store, copy {
        x: u256,
        y: u256,
    }

    struct CipherText has drop, store, copy {
        c1: Point,
        c2: Point,
    }

    struct CompressedPoint has drop, store, copy {
        x: u256,
        flag: bool,
    }

    struct CompressedCipherText has drop, store, copy {
        c1: CompressedPoint,
        c2: CompressedPoint,
    }

    public fun zero_point(): Point {
        Point{x: 0u256, y: 1u256}
    }

    public fun zero_compressed_point(): CompressedPoint {
        CompressedPoint{x: 0u256, flag: false}
    }

    public fun zero_cipher_text(): CipherText {
        CipherText{c1: zero_point(), c2: zero_point()}
    }

    public fun zero_compressed_cipher_text() : CompressedCipherText {
        CompressedCipherText{c1: zero_compressed_point(), c2: zero_compressed_point()}
    }

    public fun new_point(x: u256, y: u256): Point {
        Point{x, y}
    }

    public fun new_compressed_point(x: u256, flag: bool): CompressedPoint {
        CompressedPoint{x, flag}
    }

    public fun new_cipher_text(c1_x: u256, c1_y: u256, c2_x: u256, c2_y: u256): CipherText {
        CipherText{c1: Point{x: c1_x, y: c1_y}, c2: Point{x: c2_x, y: c2_y}}
    }

    public fun is_zero_point(p: &Point): bool {
        (p.x == 0u256 && p.y == 1u256)
    }

    public fun is_zero_cipher_text(c: &CipherText): bool {
        (c.c1.x == 0u256 && c.c1.y == 1u256 && c.c2.x == 0u256 && c.c2.y == 1u256)
    }

    public fun copy_point_into(p: &Point, p2: &mut Point) {
        p2.x = p.x;
        p2.y = p.y;
    }

    // Read `u256` value from bcs-serialized bytes.
    public fun peel_u256(bcs: &mut BCS): u256 {
        let little_u128 = (peel_u128(bcs) as u256);
        let big_u128 = (peel_u128(bcs) as u256) << 128u8;
        let value = (little_u128 + big_u128);
        value
    }

    public fun peel_point(bcs: &mut BCS): Point {
        let x = peel_u256(bcs);
        let y = peel_u256(bcs);
        Point{x, y}
    }

    public fun points_equal(p1: &Point, p2: &Point): bool {
        (p1.x == p2.x && p1.y == p2.y)
    }
    
    public fun point_is_c1(p: &Point, c: &CipherText): bool {
        (p.x == c.c1.x && p.y == c.c1.y)
    }

    public fun compressed_cipher_texts_equal(c1: &CompressedCipherText, c2: &CompressedCipherText): bool {
        (c1.c1.x == c2.c1.x && c1.c1.flag == c2.c1.flag && c1.c2.x == c2.c2.x && c1.c2.flag == c2.c2.flag)
    }

    public fun point_equals_compressed_point(p: &Point, c: &CompressedPoint): bool {
        let flag = if (p.y > HALF_BASE_MODULUS) {
            true
        } else {
            false
        };
        (p.x == c.x && flag == c.flag)
    }
    
    // we can assume p is on the subgroup
    public fun point_is_c1_compressed(p: &Point, c: &CompressedCipherText): bool {
        point_equals_compressed_point(p, &c.c1)
    }

    // we can assume p is on the subgroup
    public fun compressed_point_is_c2_compressed(p: &CompressedPoint, c: &CompressedCipherText): bool {
        (p.x == c.c2.x && p.flag == c.c2.flag)
    }

    public fun compressed_points_equal(p1: &CompressedPoint, p2: &CompressedPoint): bool {
        (p1.x == p2.x && p1.flag == p2.flag)
    }

    public fun cipher_text_c2(c: &CipherText): Point {
        c.c2
    }

    public fun cipher_text_c1(c: &CipherText): Point {
        c.c1
    }

    public fun copy_c1(p: &Point, c: &mut CipherText) {
        copy_point_into(p, &mut c.c1);
    }

    public fun copy_c2(p: &Point, c: &mut CipherText) {
        copy_point_into(p, &mut c.c2);
    }

    public fun split_vector(input: &mut vector<u8>, num: u64, length: u64): vector<vector<u8>> {
        assert!((num * length == vector::length(input)), 0);
        let output: vector<vector<u8>> = vector::empty();
        let i = 0;
        while (i < num) {
            let current: vector<u8> = vector::empty();
            let j = 0;
            while (j < length){
                vector::push_back(&mut current, vector::pop_back(input));
                j = j + 1;
            };
            vector::reverse(&mut current);
            vector::push_back(&mut output, current);
            i = i + 1;
        };
        vector::reverse(&mut output);
        output
    }

    public fun peel_encrypt_public_proof(all_input_bytes: &mut vector<u8>, all_proof_bytes: &mut vector<u8>, num: u64): (vector<vector<u8>>, vector<vector<u8>>) {
        let peeled_proofs = split_vector(all_proof_bytes, num, ENCRYPT_PUBLIC_PROOF_LENGTH);
        let peeled_inputs = split_vector(all_input_bytes, num, ENCRYPT_PUBLIC_BYTES_LENGTH);
        (peeled_inputs, peeled_proofs)
    }

    public fun peel_blind_proof(all_input_bytes: &mut vector<u8>, all_proof_bytes: &mut vector<u8>, num: u64): (vector<vector<u8>>, vector<vector<u8>>) {
        let peeled_proofs = split_vector(all_proof_bytes, num, BLIND_PROOF_LENGTH);
        let peeled_inputs = split_vector(all_input_bytes, num, BLIND_BYTES_LENGTH);
        (peeled_inputs, peeled_proofs)
    }

    public fun peel_decrypt_proof(all_input_bytes: &mut vector<u8>, all_proof_bytes: &mut vector<u8>, num: u64): (vector<vector<u8>>, vector<vector<u8>>) {
        let peeled_proofs = split_vector(all_proof_bytes, num, DECRYPT_PROOF_LENGTH);
        let peeled_inputs = split_vector(all_input_bytes, num, DECRYPT_BYTES_LENGTH);
        (peeled_inputs, peeled_proofs)
    }

    public fun invert_point(p: &Point): Point {
        Point{x: submod(0u256, p.x), y: p.y}
    }

    public fun invert_cipher_text(ct: &CipherText): CipherText {
        let c1 = invert_point(&ct.c1);
        let c2 = invert_point(&ct.c2);
        CipherText{c1, c2}
    }

    public fun point_from_bytes(bytes: vector<u8>): Point {
        let bcs = bcs::new(bytes);
        peel_point(&mut bcs)
    }

    public fun cipher_text_from_bytes(bytes: vector<u8>): CipherText {
        let bcs = bcs::new(bytes);
        let c1 = peel_point(&mut bcs);
        let c2 = peel_point(&mut bcs);
        CipherText{c1, c2}
    }

    public fun two_points_from_bytes(bytes: vector<u8>): (Point, Point) {
        let bcs = bcs::new(bytes);
        let p1 = peel_point(&mut bcs);
        let p2 = peel_point(&mut bcs);
        (p1, p2)
    }

    public fun three_points_from_bytes(bytes: vector<u8>): (Point, Point, Point) {
        let bcs = bcs::new(bytes);
        let p1 = peel_point(&mut bcs);
        let p2 = peel_point(&mut bcs);
        let p3 = peel_point(&mut bcs);
        (p1, p2, p3)
    }

    public fun two_cipher_texts_from_bytes(bytes: vector<u8>): (CipherText, CipherText) {
        let bcs = bcs::new(bytes);
        let c1 = peel_point(&mut bcs);
        let c2 = peel_point(&mut bcs);
        let d1 = peel_point(&mut bcs);
        let d2 = peel_point(&mut bcs);
        (CipherText{c1, c2}, CipherText{c1: d1, c2: d2})
    }

    public fun point_cipher_text_from_bytes(bytes: vector<u8>): (Point, CipherText) {
        let bcs = bcs::new(bytes);
        let p1 = peel_point(&mut bcs);
        let c1 = peel_point(&mut bcs);
        let c2 = peel_point(&mut bcs);
        (p1, CipherText{c1, c2})
    }

    public fun cipher_text_point_from_bytes(bytes: vector<u8>): (CipherText, Point) {
        let bcs = bcs::new(bytes);
        let c1 = peel_point(&mut bcs);
        let c2 = peel_point(&mut bcs);
        let p1 = peel_point(&mut bcs);
        (CipherText{c1, c2}, p1)
    }

    public fun cipher_text_scalar_point_from_bytes(bytes: vector<u8>): (CipherText, u256, Point) {
        let bcs = bcs::new(bytes);
        let c1 = peel_point(&mut bcs);
        let c2 = peel_point(&mut bcs);
        let s = peel_u256(&mut bcs);
        let p1 = peel_point(&mut bcs);
        (CipherText{c1, c2}, s, p1)
    }

    public fun verify_groth16(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>, verfiying_key: &vector<u8>): bool {
        let pvk = groth16::prepare_verifying_key(&groth16::bn254(), verfiying_key);
        let public_inputs = groth16::public_proof_inputs_from_bytes(public_inputs_bytes);
        let proof_points = groth16::proof_points_from_bytes(proof_points_bytes);
        let is_verified = groth16::verify_groth16_proof(&groth16::bn254(), &pvk, &public_inputs, &proof_points);
        is_verified
    }


    public fun verify_public_key(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &PUBLIC_KEY_VK)
    }

    public fun verify_encrypt(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &ENCRYPT_VK)
    }

    public fun verify_public_encrypt(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &ENCRYPT_PUBLIC_VK)
    }

    public fun verify_blind(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &BLIND_VK)
    }

    public fun verify_decrypt(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &DECRYPT_VK)
    }

    public fun verify_disjunct(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &DISJUNCT_VK)
    }

    public fun verify_reveal(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &REVEAL_VK)
    }

    public fun verify_zero_encrypt(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &ZERO_ENCRYPT_VK)
    }

    public fun verify_shuffle(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &SHUFFLE_VK)
    }
    
    public fun verify_reveal2(public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): bool {
        verify_groth16(public_inputs_bytes, proof_points_bytes, &REVEAL2_VK)
    }

    public fun get_compressed_flag(point: &Point): u8 {
        if (point.y > HALF_BASE_MODULUS) {
            1u8
        } else {
            0u8
        }
    }

    public fun verify_point_sum_equal(points: vector<Point>, public_inputs_bytes: vector<u8>, proof_points_bytes: vector<u8>): Point {
        let is_verified = verify_groth16(public_inputs_bytes, proof_points_bytes, &POINT_SUM_EQUAL_VK);
        assert!(is_verified, 0);

        let num_points = vector::length(&points);
        assert!(num_points < 6, 0);

        let bcs = bcs::new(public_inputs_bytes);
        let flags = peel_u256(&mut bcs);
        let i = 0;

        while (i < 5) {
            let flag = ((flags & 1) as u8);
            let x = peel_u256(&mut bcs);
            if (i < num_points) {
                let point = vector::borrow(&points, i);
                let point_flag = get_compressed_flag(point);
                assert!(point_flag == flag, 0);
                assert!(point.x == x, 0);
            }
            else {
                assert!(flag == 0u8, 0);
                assert!(x == 0u256, 0);
            };
            flags = flags >> 1;
            i = i + 1;
        };
        let output = peel_point(&mut bcs);
        output
    }


    public fun bytes_to_compressed_cipher_texts(bytes: vector<u8>, n: u64): vector<CompressedCipherText> {
        let bcs = bcs::new(bytes);
        let flags = peel_u256(&mut bcs);
        let i = 0;
        let poseidon_inputs = vector::empty();
        vector::push_back(&mut poseidon_inputs, flags);
        let cts = vector::empty();
        while (i < n){
            let c1_flag = ((flags & 1) as u8) == 1u8;
            flags = flags >> 1;
            let c2_flag = ((flags & 1) as u8) == 1u8;
            flags = flags >> 1;

            let c1x = peel_u256(&mut bcs);
            let c2x = peel_u256(&mut bcs);
            let compressed_c1 = CompressedPoint{x: c1x, flag: c1_flag};
            let compressed_c2 = CompressedPoint{x: c2x, flag: c2_flag};
            let ct = CompressedCipherText{c1: compressed_c1, c2: compressed_c2};
            vector::push_back(&mut cts, ct);
            i = i + 1;
        };
        cts
    }

    public fun hash_uncompressed_deck(c1xs : vector<u256>, c1ys: vector<u256>, c2xs: vector<u256>, c2ys: vector<u256>): u256 {
        let hash_input: vector<u256> = vector::empty();
        let i = 0;
        while (i < vector::length(&c1xs)) {
            let c1x = *vector::borrow(&c1xs, i);
            vector::push_back(&mut hash_input, c1x);
            i = i + 1;
        };
        i = 0;
        while (i < vector::length(&c1ys)) {
            let c1y = *vector::borrow(&c1ys, i);
            vector::push_back(&mut hash_input, c1y);
            i = i + 1;
        };
        i = 0;
        while (i < vector::length(&c2xs)) {
            let c2x = *vector::borrow(&c2xs, i);
            vector::push_back(&mut hash_input, c2x);
            i = i + 1;
        };
        i = 0;
        while (i < vector::length(&c2ys)) {
            let c2y = *vector::borrow(&c2ys, i);
            vector::push_back(&mut hash_input, c2y);
            i = i + 1;
        };

        let m1 = 13;
        let num1 = 16;
        // let m2 = 1;
        // let num2 = 13;

        let second_hash_input: vector<u256> = vector::empty();

        i = 0;
        while (i < m1) {
            let round_hash_input = vector::empty();
            let j = 0;
            while (j < num1) {
                vector::push_back(&mut round_hash_input, *vector::borrow(&hash_input, i * num1 + j));
                j = j + 1;
            };
            i = i + 1;
            let round_hash_output = poseidon_bn254(&round_hash_input);
            vector::push_back(&mut second_hash_input, round_hash_output);
        };
        let hash_output = poseidon_bn254(&second_hash_input);
        hash_output
   
    }
    
    public fun uncompressed_bytes_to_compressed_cipher_texts(bytes: vector<u8>, n: u64): (vector<CompressedCipherText>, u256) {
        let bcs = bcs::new(bytes);
        let i = 0;
        let cts = vector::empty();
        let c1xs = vector::empty();
        let c1ys = vector::empty();
        let c2xs = vector::empty();
        let c2ys = vector::empty();

        while (i < n) {
            let c1x = peel_u256(&mut bcs);
            let c1y = peel_u256(&mut bcs);
            let c2x = peel_u256(&mut bcs);
            let c2y = peel_u256(&mut bcs);

            vector::push_back(&mut c1xs, c1x);
            vector::push_back(&mut c1ys, c1y);
            vector::push_back(&mut c2xs, c2x);
            vector::push_back(&mut c2ys, c2y);

            let c1_flag = if (c1y > HALF_BASE_MODULUS) {
                true
            } else {
                false
            };

            let c2_flag = if (c2y > HALF_BASE_MODULUS) {
                true
            } else {
                false
            };

            let compressed_c1 = CompressedPoint{x: c1x, flag: c1_flag};
            let compressed_c2 = CompressedPoint{x: c2x, flag: c2_flag};
            let ct = CompressedCipherText{c1: compressed_c1, c2: compressed_c2};
            vector::push_back(&mut cts, ct);
            i = i + 1;
        };
        let deck_hash = hash_uncompressed_deck(c1xs, c1ys, c2xs, c2ys);
        (cts, deck_hash)
    }

    public fun verify_plain_hash(hash: u256) {
        assert!(hash == PLAIN_HASH, 0);
    }
}